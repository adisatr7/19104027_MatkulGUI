# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GameWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon
import random
import mysql.connector

from PyQt5.QtWidgets import QMessageBox

from Teori.Tubes.Class.MenuWindow import MenuWindow


class GameWindow:
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(404, 305)
        self.gridLayoutWidget = QtWidgets.QWidget(Form)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 401, 301))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.giveup_button = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.giveup_button.sizePolicy().hasHeightForWidth())
        self.giveup_button.setSizePolicy(sizePolicy)
        self.giveup_button.setObjectName("giveup_button")
        self.giveup_button.clicked.connect(self.giveup)
        self.gridLayout.addWidget(self.giveup_button, 10, 0, 1, 1)
        self.round_label = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.round_label.setFont(font)
        self.round_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.round_label.setAlignment(QtCore.Qt.AlignCenter)
        self.round_label.setObjectName("round_label")
        self.gridLayout.addWidget(self.round_label, 0, 0, 1, 2)
        self.submit_button = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.submit_button.sizePolicy().hasHeightForWidth())
        self.submit_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setKerning(True)
        self.submit_button.setFont(font)
        self.submit_button.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.submit_button.setCheckable(False)
        self.submit_button.setFlat(False)
        self.submit_button.setObjectName("submit_button")
        self.submit_button.clicked.connect(self.submit)
        self.gridLayout.addWidget(self.submit_button, 10, 1, 1, 1)
        self.question_label = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.question_label.setFont(font)
        self.question_label.setAlignment(QtCore.Qt.AlignCenter)
        self.question_label.setObjectName("question_label")
        self.gridLayout.addWidget(self.question_label, 2, 0, 1, 2)
        self.freezetime_button = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.gridLayout.addWidget(self.freezetime_button, 3, 1, 1, 1)
        self.skip_total_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.skip_total_label.setAlignment(QtCore.Qt.AlignCenter)
        self.skip_total_label.setObjectName("skip_total_label")
        self.gridLayout.addWidget(self.skip_total_label, 8, 1, 1, 1)
        self.answer_c = QtWidgets.QRadioButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.answer_c.setFont(font)
        self.answer_c.setObjectName("answer_c")
        self.gridLayout.addWidget(self.answer_c, 7, 0, 2, 1)
        self.doublepoint_button = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.gridLayout.addWidget(self.doublepoint_button, 5, 1, 1, 1)
        self.timer_label = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.timer_label.setFont(font)
        self.timer_label.setAlignment(QtCore.Qt.AlignCenter)
        self.timer_label.setObjectName("timer_label")
        self.gridLayout.addWidget(self.timer_label, 1, 0, 1, 2)
        self.freezetime_total_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.freezetime_total_label.setAlignment(QtCore.Qt.AlignCenter)
        self.freezetime_total_label.setObjectName("freezetime_total_label")
        self.gridLayout.addWidget(self.freezetime_total_label, 4, 1, 1, 1)
        self.skip_button = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.gridLayout.addWidget(self.skip_button, 7, 1, 1, 1)
        self.spacer = QtWidgets.QLabel(self.gridLayoutWidget)
        self.spacer.setText("")
        self.spacer.setObjectName("spacer")
        self.gridLayout.addWidget(self.spacer, 9, 0, 1, 2)
        self.answer_b = QtWidgets.QRadioButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.answer_b.setFont(font)
        self.answer_b.setObjectName("answer_b")
        self.gridLayout.addWidget(self.answer_b, 5, 0, 2, 1)
        self.answer_a = QtWidgets.QRadioButton(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.answer_a.setFont(font)
        self.answer_a.setObjectName("answer_a")
        self.gridLayout.addWidget(self.answer_a, 3, 0, 2, 1)
        self.doublepoint_total_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.doublepoint_total_label.setAlignment(QtCore.Qt.AlignCenter)
        self.doublepoint_total_label.setObjectName("doublepoint_total_label")
        self.gridLayout.addWidget(self.doublepoint_total_label, 6, 1, 1, 1)

        # Freeze Time power up icon setup
        freezetime_icon = QIcon('../Asset/freezetime_icon.png') # import picture
        self.freezetime_button.setObjectName("freezetime_button")
        self.freezetime_button.setIcon(freezetime_icon) # add freezetime icon

        # Skip Round power up icon setup
        skip_icon = QIcon('../Asset/skip_icon.png') # import picture
        self.skip_button.setObjectName("skip_button")
        self.skip_button.setIcon(skip_icon) # add skip icon

        # Double Point power up icon setup
        doublepoint_icon = QIcon('../Asset/doublepoint_icon.png')
        self.doublepoint_button.setObjectName("doublepoint_button")
        self.doublepoint_button.setIcon(doublepoint_icon)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "MathQuizâ„¢"))
        self.giveup_button.setText(_translate("Form", "Give up"))
        self.round_label.setText(_translate("Form", "Round: {x}"))
        self.submit_button.setText(_translate("Form", "Submit"))
        self.question_label.setText(_translate("Form", "20 : 2 ="))
        self.freezetime_button.setText(_translate("Form", " Freeze Time"))
        self.skip_total_label.setText(_translate("Form", "You Have: {total}"))
        self.doublepoint_button.setText(_translate("Form", " Double Point"))
        self.timer_label.setText(_translate("Form", "{timer}"))
        self.freezetime_total_label.setText(_translate("Form", "You Have: {total}"))
        self.skip_button.setText(_translate("Form", " Skip Round"))
        self.answer_a.setText(_translate("Form", "Answer A"))
        self.answer_b.setText(_translate("Form", "Answer B"))
        self.answer_c.setText(_translate("Form", "Answer C"))
        self.doublepoint_total_label.setText(_translate("Form", "You Have : {total}"))


    def startRound(self, difficulty, playerId):
        self.difficulty = difficulty
        self.playerId = playerId
        self.gameRound = 1
        self.life = 4 - self.difficulty
        self.totalPts = 0

        self.generateQuestion()


    def nextRound(self):
        gameWindow.gameRound += 1
        self.generateQuestion()


    def generateQuestion(self):
        self.difficultyAdjustment()
        self.generateCorrectAnswer()
        self.generateWrongAnswers()
        self.randomizeAnswerPlacement()
        self.printGeneratedQuestion()


    def difficultyAdjustment(self):
        # Difficulty settings
        EASY = int(self.gameRound / 3)
        NORMAL = int(self.gameRound / 2)
        HARD = (self.gameRound)

        # Easy mode
        if self.difficulty == 1:
            self.op = self.randomizeOperator()
            if self.op == 4:
                self.op -= 1
            self.n1 = self.randomizeNumber(EASY)
            self.n2 = self.randomizeNumber(EASY)

        # Normal mode
        elif self.difficulty == 2:
            self.op = self.randomizeOperator()
            self.n1 = self.randomizeNumber(NORMAL) if self.op != 4 else self.randomizeEvenNumber(NORMAL)
            self.n2 = self.randomizeNumberWithNegative(NORMAL) if self.op != 4 else self.randomizeEvenNumber(NORMAL)

        # Hard mode
        elif self.difficulty == 3:
            self.op = self.randomizeOperator()
            self.n1 = self.randomizeNumberWithNegative(HARD) if self.op != 4 else self.randomizeEvenNumber(HARD)
            self.n2 = self.randomizeNumberWithNegative(HARD) if self.op != 4 else self.randomizeEvenNumber(HARD)

        # Should not happen, but just in case...
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Error while adjusting game difficulty!")
            msg.setWindowTitle("Please report this to the developer!")
            msg.exec_()


    def generateCorrectAnswer(self):
        self.correctAnswer = 1

        if self.op == 1:
            self.correctAnswer = self.n1 + self.n2
        elif self.op == 2:
            self.correctAnswer = self.n1 - self.n2
        elif self.op == 3:
            self.correctAnswer = self.n1 * self.n2
        elif self.op == 4:
            self.correctAnswer = self.n1 / self.n2

        # else:
        #    msg = QMessageBox()
        #    msg.setIcon(QMessageBox.Critical)
        #    msg.setText("Error while calculating correct answer!")
        #    msg.setWindowTitle("Please report this to the developer!")
        #    msg.exec_()


    def generateWrongAnswers(self):
        self.wrongAnswer1 = self.correctAnswer + self.randomizeNumberWithNegative(random.randint(1, self.difficulty))
        self.wrongAnswer2 = self.correctAnswer + self.randomizeNumberWithNegative(random.randint(1, self.difficulty))


    def randomizeAnswerPlacement(self):
        n = random.randint(1,4)

        if n == 1:
            self.answerA = self.correctAnswer
            self.answerB = self.wrongAnswer1
            self.answerC = self.wrongAnswer2
        elif n == 2:
            self.answerA = self.wrongAnswer1
            self.answerB = self.correctAnswer
            self.answerC = self.wrongAnswer2
        else:
            self.answerA = self.wrongAnswer1
            self.answerB = self.wrongAnswer2
            self.answerC = self.correctAnswer


    def printGeneratedQuestion(self):

        operator = ""
        if self.op == 1:
            operator = "+"
        elif self.op == 2:
            operator = "-"
        elif self.op == 3:
            operator = "*"
        else:
            operator = "/"

        # Round | Life
        self.round_label.setText(f"Round: {self.gameRound} | Life: {self.life}/{4 - self.difficulty}")

        # Question
        self.question_label.setText(f"{self.n1} {operator} {self.n2}")

        # Answers
        self.answer_a.setText(str(self.answerA))
        self.answer_b.setText(str(self.answerB))
        self.answer_c.setText(str(self.answerC))


    def randomizeNumber(self, maxDigit):
        max = 0
        temp = 10
        for i in range(maxDigit):
            max += temp
            temp *= 10
        return random.randint(1, max)


    def randomizeNumberWithNegative(self, maxDigit):
        max = 0
        temp = 10
        for i in range(maxDigit):
            max += temp
            temp *= 10
        return random.randint(max * -1, max)


    def randomizeEvenNumber(self, maxDigit):
        result = 1
        while result % 2 != 0:
            result = self.randomizeNumber(maxDigit)
        return result


    def randomizeOperator(self):
        return random.randint(1, 5)


    def submit(self):
        # Radiobutton check
        if self.answer_a.isChecked():
            answer = self.answerA
            self.answer_a.setChecked(False)
        elif self.answer_b.isChecked():
            answer = self.answerB
            self.answer_b.setChecked(False)
        elif self.answer_c.isChecked():
            answer = self.answerC
            self.answer_c.setChecked(False)
        else:
            answer = ""

        # Answer check
        if answer == self.correctAnswer:
            # Calculate points and reward them to the player
            pts = self.gameRound + self.difficulty
            self.totalPts += pts

            # Show popup message
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText(f"You earned {pts} points (total: {self.totalPts})!")
            msg.setWindowTitle("Correct!")
            msg.exec_()
            self.nextRound()

        elif self.life > 0:
            # Lower life by 1
            self.life -= 1

            # Show popup message
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText(f"Please try again!")
            msg.setWindowTitle("Wrong answer!")
            msg.exec_()

            # Generate a new question
            self.generateQuestion()

        else:
            self.gameOver()


    def giveup(self):
        self.gameOver()


    def gameOver(self):
        # Show popup message
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText(f"You answered {self.gameRound -1} questions and earned {self.totalPts} points!")
        msg.setWindowTitle("Game Over!")
        msg.exec_()

        # Update record
        db = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="db_mathquiz"
        )
        c = db.cursor()
        # TODO: Implement timer, then uncomment this:
        # c.execute(f"INSERT INTO game (player_id, score, start_time, questions_answered) "
        #           f"VALUE ({self.playerId}, {self.totalPts}, {startTime}, {self.gameRound}))")

        # Change window
        gameForm.close()
        menuForm.show()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    gameForm = QtWidgets.QWidget()
    gameWindow = GameWindow()
    gameWindow.setupUi(gameForm)
    gameForm.show()

    menuForm = QtWidgets.QWidget()
    menuWindow = MenuWindow()
    menuWindow.setupUi(menuForm)

    gameWindow.startRound(3)
    sys.exit(app.exec_())
